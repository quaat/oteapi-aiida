{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AIIDA Plugins \u00b6 An OTEAPI Plugin with OTE strategies. Further reading: OTEAPI Core Documentation OTEAPI Services Documentation Test the plugin \u00b6 There are two ways of testing this plugin: unit testing or end-to-end testing. Unit tests \u00b6 To run the unit tests, checking that all the Python code functionality works as intended, one needs to first install the development requirements: cd /path/to/oteapi-aiida pip install -U -e . [ dev ] Then one can run the tests through the pytest framework: pytest End-to-end testing \u00b6 Here, end-to-end means using OTElib to initialize an OTEClient pointing at a running REST API service, similar to the one created by OTEAPI Services , and setting up a pipeline that utilizes the strategies from this plugin. In order to test this locally, one requires Docker Compose . Then, one can setup a local REST API service that includes this plugin and test it with the following commands: docker-compose -f docker-compose.yml pull # Download the latest container images docker-compose -f docker-compose.yml up # Run the services This will start the service and take over the terminal, printing log messages from all the services started through the docker-compose.yml file. If one instead wishes to keep that terminal available, or only show the logs relevant for the oteapi service, one can do: docker-compose -f docker-compose.yml up -d # Run the services detached # Show logs and give back terminal docker logs oteapi-aiida-oteapi-1 # Show logs and follow them live docker logs -f oteapi-aiida-oteapi-1 Now, one can instantiate an otelib.OTEClient with \"http://localhost:8080\" (or using the PORT environment variable value instead of 8080 if it has been set) and test the strategies by supplying the correct configuration values. Note, remember to update setup.cfg to list the plugin strategies - otherwise they will not be findable by the OTEAPI service. License and copyright \u00b6 AIIDA Plugins is released under the MIT license with copyright \u00a9 SINTEF. Acknowledgment \u00b6 AIIDA Plugins has been created via the cookiecutter template for OTEAPI plugins . AIIDA Plugins has been supported by the following projects: OntoTrans (2020-2024) that receives funding from the European Union\u2019s Horizon 2020 Research and Innovation Programme, under Grant Agreement n. 862136. VIPCOAT (2021-2025) receives funding from the European Union\u2019s Horizon 2020 Research and Innovation Programme - DT-NMBP-11-2020 Open Innovation Platform for Materials Modelling, under Grant Agreement no: 952903. OpenModel (2021-2025) receives funding from the European Union\u2019s Horizon 2020 Research and Innovation Programme - DT-NMBP-11-2020 Open Innovation Platform for Materials Modelling, under Grant Agreement no: 953167.","title":"Home"},{"location":"#aiida-plugins","text":"An OTEAPI Plugin with OTE strategies. Further reading: OTEAPI Core Documentation OTEAPI Services Documentation","title":"AIIDA Plugins"},{"location":"#test-the-plugin","text":"There are two ways of testing this plugin: unit testing or end-to-end testing.","title":"Test the plugin"},{"location":"#unit-tests","text":"To run the unit tests, checking that all the Python code functionality works as intended, one needs to first install the development requirements: cd /path/to/oteapi-aiida pip install -U -e . [ dev ] Then one can run the tests through the pytest framework: pytest","title":"Unit tests"},{"location":"#end-to-end-testing","text":"Here, end-to-end means using OTElib to initialize an OTEClient pointing at a running REST API service, similar to the one created by OTEAPI Services , and setting up a pipeline that utilizes the strategies from this plugin. In order to test this locally, one requires Docker Compose . Then, one can setup a local REST API service that includes this plugin and test it with the following commands: docker-compose -f docker-compose.yml pull # Download the latest container images docker-compose -f docker-compose.yml up # Run the services This will start the service and take over the terminal, printing log messages from all the services started through the docker-compose.yml file. If one instead wishes to keep that terminal available, or only show the logs relevant for the oteapi service, one can do: docker-compose -f docker-compose.yml up -d # Run the services detached # Show logs and give back terminal docker logs oteapi-aiida-oteapi-1 # Show logs and follow them live docker logs -f oteapi-aiida-oteapi-1 Now, one can instantiate an otelib.OTEClient with \"http://localhost:8080\" (or using the PORT environment variable value instead of 8080 if it has been set) and test the strategies by supplying the correct configuration values. Note, remember to update setup.cfg to list the plugin strategies - otherwise they will not be findable by the OTEAPI service.","title":"End-to-end testing"},{"location":"#license-and-copyright","text":"AIIDA Plugins is released under the MIT license with copyright \u00a9 SINTEF.","title":"License and copyright"},{"location":"#acknowledgment","text":"AIIDA Plugins has been created via the cookiecutter template for OTEAPI plugins . AIIDA Plugins has been supported by the following projects: OntoTrans (2020-2024) that receives funding from the European Union\u2019s Horizon 2020 Research and Innovation Programme, under Grant Agreement n. 862136. VIPCOAT (2021-2025) receives funding from the European Union\u2019s Horizon 2020 Research and Innovation Programme - DT-NMBP-11-2020 Open Innovation Platform for Materials Modelling, under Grant Agreement no: 952903. OpenModel (2021-2025) receives funding from the European Union\u2019s Horizon 2020 Research and Innovation Programme - DT-NMBP-11-2020 Open Innovation Platform for Materials Modelling, under Grant Agreement no: 953167.","title":"Acknowledgment"},{"location":"CHANGELOG/","text":"Changelog \u00b6 This file will hold an auto-generated changelog for you project.","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"This file will hold an auto-generated changelog for you project.","title":"Changelog"},{"location":"LICENSE/","text":"MIT License Copyright (c) 2022 SINTEF Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"all_strategies/","text":"AIIDA Plugins Strategies \u00b6 This page provides documentation for the oteapi_aiida.strategies submodule, where all the AIIDA Plugins strategies are located. These strategies will be available when setting up a server in an environment with oteapi-aiida installed. download \u00b6 Demo download strategy class for file. FileConfig \u00b6 Bases: AttrDict File-specific Configuration Data Model. Source code in oteapi_aiida/strategies/download.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class FileConfig ( AttrDict ): \"\"\"File-specific Configuration Data Model.\"\"\" text : bool = Field ( False , description = ( \"Whether the file should be opened in text mode. If `False`, the file will\" \" be opened in bytes mode.\" ), ) encoding : Optional [ str ] = Field ( None , description = ( \"Encoding used when opening the file. The default is platform dependent.\" ), ) datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), ) FileResourceConfig \u00b6 Bases: ResourceConfig File download strategy filter config. Source code in oteapi_aiida/strategies/download.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class FileResourceConfig ( ResourceConfig ): \"\"\"File download strategy filter config.\"\"\" downloadUrl : FileUrl = Field ( # type: ignore[assignment] ... , description = \"The file URL, which will be downloaded.\" ) configuration : FileConfig = Field ( FileConfig (), description = \"File download strategy-specific configuration.\" ) @validator ( \"downloadUrl\" ) def ensure_path_exists ( cls , value : FileUrl ) -> FileUrl : \"\"\"Ensure `path` is defined in `downloadUrl`.\"\"\" if not value . path : raise ValueError ( \"downloadUrl must contain a `path` part.\" ) return value ensure_path_exists ( value ) \u00b6 Ensure path is defined in downloadUrl . Source code in oteapi_aiida/strategies/download.py 50 51 52 53 54 55 @validator ( \"downloadUrl\" ) def ensure_path_exists ( cls , value : FileUrl ) -> FileUrl : \"\"\"Ensure `path` is defined in `downloadUrl`.\"\"\" if not value . path : raise ValueError ( \"downloadUrl must contain a `path` part.\" ) return value FileStrategy \u00b6 Strategy for retrieving data from a local file. Registers strategies : (\"scheme\", \"fileDEMO\") Source code in oteapi_aiida/strategies/download.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @dataclass class FileStrategy : \"\"\"Strategy for retrieving data from a local file. **Registers strategies**: - `(\"scheme\", \"fileDEMO\")` \"\"\" download_config : FileResourceConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateFile : \"\"\"Read local file.\"\"\" filename = uri_to_path ( self . download_config . downloadUrl ) . resolve () if not filename . exists (): raise FileNotFoundError ( f \"File not found at { filename } \" ) cache = DataCache ( self . download_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( filename . read_text ( encoding = self . download_config . configuration . encoding ) if self . download_config . configuration . text else filename . read_bytes () ) return SessionUpdateFile ( key = key ) get ( session = None ) \u00b6 Read local file. Source code in oteapi_aiida/strategies/download.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateFile : \"\"\"Read local file.\"\"\" filename = uri_to_path ( self . download_config . downloadUrl ) . resolve () if not filename . exists (): raise FileNotFoundError ( f \"File not found at { filename } \" ) cache = DataCache ( self . download_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( filename . read_text ( encoding = self . download_config . configuration . encoding ) if self . download_config . configuration . text else filename . read_bytes () ) return SessionUpdateFile ( key = key ) initialize ( session = None ) \u00b6 Initialize. Source code in oteapi_aiida/strategies/download.py 76 77 78 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () SessionUpdateFile \u00b6 Bases: SessionUpdate Class for returning values from Download File strategy. Source code in oteapi_aiida/strategies/download.py 58 59 60 61 class SessionUpdateFile ( SessionUpdate ): \"\"\"Class for returning values from Download File strategy.\"\"\" key : str = Field ( ... , description = \"Key to access the data in the cache.\" ) filter \u00b6 Demo filter strategy. DemoDataModel \u00b6 Bases: AttrDict Demo filter data model. Source code in oteapi_aiida/strategies/filter.py 14 15 16 17 18 19 20 21 22 23 24 class DemoDataModel ( AttrDict ): \"\"\"Demo filter data model.\"\"\" demo_data : List [ int ] = Field ( ... , description = \"List of demo data.\" ) datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), ) DemoFilter \u00b6 Filter Strategy. Registers strategies : (\"filterType\", \"filter/DEMO\") Source code in oteapi_aiida/strategies/filter.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 @dataclass class DemoFilter : \"\"\"Filter Strategy. **Registers strategies**: - `(\"filterType\", \"filter/DEMO\")` \"\"\" filter_config : DemoFilterConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoFilter : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" cache = DataCache ( self . filter_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( self . filter_config . configuration . demo_data ) return SessionUpdateDemoFilter ( key = key ) def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/filter.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDemoFilter An update model of key/value-pairs to be stored in the SessionUpdateDemoFilter session-specific context from services. Source code in oteapi_aiida/strategies/filter.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoFilter : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" cache = DataCache ( self . filter_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( self . filter_config . configuration . demo_data ) return SessionUpdateDemoFilter ( key = key ) DemoFilterConfig \u00b6 Bases: FilterConfig Demo filter strategy filter config. Source code in oteapi_aiida/strategies/filter.py 27 28 29 30 31 32 33 34 35 class DemoFilterConfig ( FilterConfig ): \"\"\"Demo filter strategy filter config.\"\"\" filterType : str = Field ( \"filter/DEMO\" , const = True , description = FilterConfig . __fields__ [ \"filterType\" ] . field_info . description , ) configuration : DemoDataModel = Field ( ... , description = \"Demo filter data model.\" ) SessionUpdateDemoFilter \u00b6 Bases: SessionUpdate Class for returning values from Download File strategy. Source code in oteapi_aiida/strategies/filter.py 38 39 40 41 class SessionUpdateDemoFilter ( SessionUpdate ): \"\"\"Class for returning values from Download File strategy.\"\"\" key : str = Field ( ... , description = \"Key to access the data in the cache.\" ) function \u00b6 Demo function strategy class. DemoFunctionStrategy \u00b6 Function Strategy. Registers strategies : (\"functionType\", \"function/DEMO\") Source code in oteapi_aiida/strategies/function.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dataclass class DemoFunctionStrategy : \"\"\"Function Strategy. **Registers strategies**: - `(\"functionType\", \"function/DEMO\")` \"\"\" function_config : FunctionConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/function.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/function.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () mapping \u00b6 Demo mapping strategy class. DemoMappingStrategy \u00b6 Mapping Strategy. Registers strategies : (\"mappingType\", \"mapping/DEMO\") Source code in oteapi_aiida/strategies/mapping.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dataclass class DemoMappingStrategy : \"\"\"Mapping Strategy. **Registers strategies**: - `(\"mappingType\", \"mapping/DEMO\")` \"\"\" mapping_config : MappingConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/mapping.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/mapping.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () parse \u00b6 Demo strategy class for text/json. DemoJSONDataParseStrategy \u00b6 Parse strategy for JSON. Registers strategies : (\"mediaType\", \"application/jsonDEMO\") Source code in oteapi_aiida/strategies/parse.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @dataclass class DemoJSONDataParseStrategy : \"\"\"Parse strategy for JSON. **Registers strategies**: - `(\"mediaType\", \"application/jsonDEMO\")` \"\"\" parse_config : JSONParseConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateJSONParse : \"\"\"Parse json.\"\"\" downloader = create_strategy ( \"download\" , self . parse_config ) output = downloader . get () cache = DataCache ( self . parse_config . configuration . datacache_config ) content = cache . get ( output [ \"key\" ]) if isinstance ( content , dict ): return SessionUpdateJSONParse ( content = content ) return SessionUpdateJSONParse ( content = json . loads ( content )) get ( session = None ) \u00b6 Parse json. Source code in oteapi_aiida/strategies/parse.py 63 64 65 66 67 68 69 70 71 72 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateJSONParse : \"\"\"Parse json.\"\"\" downloader = create_strategy ( \"download\" , self . parse_config ) output = downloader . get () cache = DataCache ( self . parse_config . configuration . datacache_config ) content = cache . get ( output [ \"key\" ]) if isinstance ( content , dict ): return SessionUpdateJSONParse ( content = content ) return SessionUpdateJSONParse ( content = json . loads ( content )) initialize ( session = None ) \u00b6 Initialize. Source code in oteapi_aiida/strategies/parse.py 59 60 61 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () JSONConfig \u00b6 Bases: AttrDict JSON parse-specific Configuration Data Model. Source code in oteapi_aiida/strategies/parse.py 16 17 18 19 20 21 22 23 24 25 class JSONConfig ( AttrDict ): \"\"\"JSON parse-specific Configuration Data Model.\"\"\" datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), ) JSONParseConfig \u00b6 Bases: ResourceConfig File download strategy filter config. Source code in oteapi_aiida/strategies/parse.py 28 29 30 31 32 33 34 35 36 37 38 class JSONParseConfig ( ResourceConfig ): \"\"\"File download strategy filter config.\"\"\" mediaType : str = Field ( \"application/jsonDEMO\" , const = True , description = ResourceConfig . __fields__ [ \"mediaType\" ] . field_info . description , ) configuration : JSONConfig = Field ( JSONConfig (), description = \"JSON parse strategy-specific configuration.\" ) SessionUpdateJSONParse \u00b6 Bases: SessionUpdate Class for returning values from JSON Parse. Source code in oteapi_aiida/strategies/parse.py 41 42 43 44 class SessionUpdateJSONParse ( SessionUpdate ): \"\"\"Class for returning values from JSON Parse.\"\"\" content : dict = Field ( ... , description = \"Content of the JSON document.\" ) resource \u00b6 Demo resource strategy class. DemoConfig \u00b6 Bases: AttrDict Strategy-specific Configuration Data Model. Source code in oteapi_aiida/strategies/resource.py 14 15 16 17 18 19 20 class DemoConfig ( AttrDict ): \"\"\"Strategy-specific Configuration Data Model.\"\"\" datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = \"Configuration for the data cache.\" , ) DemoResourceConfig \u00b6 Bases: ResourceConfig Demo resource strategy config. Source code in oteapi_aiida/strategies/resource.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class DemoResourceConfig ( ResourceConfig ): \"\"\"Demo resource strategy config.\"\"\" # Require the resource to be a REST API with JSON responses that uses the # DemoJSONDataParseStrategy strategy. mediaType : str = Field ( \"application/jsonDEMO\" , const = True , description = ResourceConfig . __fields__ [ \"mediaType\" ] . field_info . description , ) accessService : str = Field ( \"DEMO-access-service\" , const = True , description = ResourceConfig . __fields__ [ \"accessService\" ] . field_info . description , ) configuration : DemoConfig = Field ( DemoConfig (), description = \"Demo resource strategy-specific configuration.\" , ) DemoResourceStrategy \u00b6 Resource Strategy. Registers strategies : (\"accessService\", \"DEMO-access-service\") Source code in oteapi_aiida/strategies/resource.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 @dataclass class DemoResourceStrategy : \"\"\"Resource Strategy. **Registers strategies**: - `(\"accessService\", \"DEMO-access-service\")` \"\"\" resource_config : DemoResourceConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoResource : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" # Example of the plugin using a parse strategy to (fetch) and parse the data session = session if session else {} parse_config = self . resource_config . copy () if not parse_config . downloadUrl : parse_config . downloadUrl = self . resource_config . accessUrl session . update ( create_strategy ( \"parse\" , parse_config ) . initialize ( session )) session . update ( create_strategy ( \"parse\" , parse_config ) . get ( session )) if \"content\" not in session : raise ValueError ( f \"Expected the parse strategy for { self . resource_config . mediaType !r} \" \"to return a session with a 'content' key.\" ) return SessionUpdateDemoResource ( output = session [ \"content\" ]) get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDemoResource An update model of key/value-pairs to be stored in the SessionUpdateDemoResource session-specific context from services. Source code in oteapi_aiida/strategies/resource.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoResource : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" # Example of the plugin using a parse strategy to (fetch) and parse the data session = session if session else {} parse_config = self . resource_config . copy () if not parse_config . downloadUrl : parse_config . downloadUrl = self . resource_config . accessUrl session . update ( create_strategy ( \"parse\" , parse_config ) . initialize ( session )) session . update ( create_strategy ( \"parse\" , parse_config ) . get ( session )) if \"content\" not in session : raise ValueError ( f \"Expected the parse strategy for { self . resource_config . mediaType !r} \" \"to return a session with a 'content' key.\" ) return SessionUpdateDemoResource ( output = session [ \"content\" ]) initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/resource.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () SessionUpdateDemoResource \u00b6 Bases: SessionUpdate Class for returning values from Demo Resource strategy. Source code in oteapi_aiida/strategies/resource.py 45 46 47 48 49 50 51 52 53 class SessionUpdateDemoResource ( SessionUpdate ): \"\"\"Class for returning values from Demo Resource strategy.\"\"\" output : dict = Field ( ... , description = ( \"The output from downloading the response from the given `accessUrl`.\" ), ) transformation \u00b6 Demo transformation strategy class. DummyTransformationStrategy \u00b6 Transformation Strategy. Registers strategies : (\"transformationType\", \"script/DEMO\") Source code in oteapi_aiida/strategies/transformation.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 @dataclass class DummyTransformationStrategy : \"\"\"Transformation Strategy. **Registers strategies**: - `(\"transformationType\", \"script/DEMO\")` \"\"\" transformation_config : TransformationConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def run ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDummyTransformation : \"\"\"Run a transformation job. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. As a minimum, the dictionary will contain the job ID. \"\"\" return SessionUpdateDummyTransformation ( result = \"a01d\" ) def status ( self , task_id : str ) -> TransformationStatus : \"\"\"Get job status. Parameters: task_id: The transformation job ID. Returns: An overview of the transformation job's status, including relevant metadata. \"\"\" return TransformationStatus ( id = task_id , status = \"wip\" , messages = [], created = datetime . utcnow (), startTime = datetime . utcnow (), finishTime = datetime . utcnow (), ) get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/transformation.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/transformation.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () run ( session = None ) \u00b6 Run a transformation job. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDummyTransformation An update model of key/value-pairs to be stored in the SessionUpdateDummyTransformation session-specific context from services. SessionUpdateDummyTransformation As a minimum, the dictionary will contain the job ID. Source code in oteapi_aiida/strategies/transformation.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def run ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDummyTransformation : \"\"\"Run a transformation job. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. As a minimum, the dictionary will contain the job ID. \"\"\" return SessionUpdateDummyTransformation ( result = \"a01d\" ) status ( task_id ) \u00b6 Get job status. Parameters: Name Type Description Default task_id str The transformation job ID. required Returns: Type Description TransformationStatus An overview of the transformation job's status, including relevant TransformationStatus metadata. Source code in oteapi_aiida/strategies/transformation.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 def status ( self , task_id : str ) -> TransformationStatus : \"\"\"Get job status. Parameters: task_id: The transformation job ID. Returns: An overview of the transformation job's status, including relevant metadata. \"\"\" return TransformationStatus ( id = task_id , status = \"wip\" , messages = [], created = datetime . utcnow (), startTime = datetime . utcnow (), finishTime = datetime . utcnow (), ) SessionUpdateDummyTransformation \u00b6 Bases: SessionUpdate Class for returning values from Dummy Transformation strategy. Source code in oteapi_aiida/strategies/transformation.py 14 15 16 17 class SessionUpdateDummyTransformation ( SessionUpdate ): \"\"\"Class for returning values from Dummy Transformation strategy.\"\"\" result : str = Field ( ... , description = \"The job ID.\" )","title":"AIIDA Plugins Strategies"},{"location":"all_strategies/#aiida-plugins-strategies","text":"This page provides documentation for the oteapi_aiida.strategies submodule, where all the AIIDA Plugins strategies are located. These strategies will be available when setting up a server in an environment with oteapi-aiida installed.","title":"AIIDA Plugins Strategies"},{"location":"all_strategies/#oteapi_aiida.strategies.download","text":"Demo download strategy class for file.","title":"download"},{"location":"all_strategies/#oteapi_aiida.strategies.download.FileConfig","text":"Bases: AttrDict File-specific Configuration Data Model. Source code in oteapi_aiida/strategies/download.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class FileConfig ( AttrDict ): \"\"\"File-specific Configuration Data Model.\"\"\" text : bool = Field ( False , description = ( \"Whether the file should be opened in text mode. If `False`, the file will\" \" be opened in bytes mode.\" ), ) encoding : Optional [ str ] = Field ( None , description = ( \"Encoding used when opening the file. The default is platform dependent.\" ), ) datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), )","title":"FileConfig"},{"location":"all_strategies/#oteapi_aiida.strategies.download.FileResourceConfig","text":"Bases: ResourceConfig File download strategy filter config. Source code in oteapi_aiida/strategies/download.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class FileResourceConfig ( ResourceConfig ): \"\"\"File download strategy filter config.\"\"\" downloadUrl : FileUrl = Field ( # type: ignore[assignment] ... , description = \"The file URL, which will be downloaded.\" ) configuration : FileConfig = Field ( FileConfig (), description = \"File download strategy-specific configuration.\" ) @validator ( \"downloadUrl\" ) def ensure_path_exists ( cls , value : FileUrl ) -> FileUrl : \"\"\"Ensure `path` is defined in `downloadUrl`.\"\"\" if not value . path : raise ValueError ( \"downloadUrl must contain a `path` part.\" ) return value","title":"FileResourceConfig"},{"location":"all_strategies/#oteapi_aiida.strategies.download.FileResourceConfig.ensure_path_exists","text":"Ensure path is defined in downloadUrl . Source code in oteapi_aiida/strategies/download.py 50 51 52 53 54 55 @validator ( \"downloadUrl\" ) def ensure_path_exists ( cls , value : FileUrl ) -> FileUrl : \"\"\"Ensure `path` is defined in `downloadUrl`.\"\"\" if not value . path : raise ValueError ( \"downloadUrl must contain a `path` part.\" ) return value","title":"ensure_path_exists()"},{"location":"all_strategies/#oteapi_aiida.strategies.download.FileStrategy","text":"Strategy for retrieving data from a local file. Registers strategies : (\"scheme\", \"fileDEMO\") Source code in oteapi_aiida/strategies/download.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @dataclass class FileStrategy : \"\"\"Strategy for retrieving data from a local file. **Registers strategies**: - `(\"scheme\", \"fileDEMO\")` \"\"\" download_config : FileResourceConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateFile : \"\"\"Read local file.\"\"\" filename = uri_to_path ( self . download_config . downloadUrl ) . resolve () if not filename . exists (): raise FileNotFoundError ( f \"File not found at { filename } \" ) cache = DataCache ( self . download_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( filename . read_text ( encoding = self . download_config . configuration . encoding ) if self . download_config . configuration . text else filename . read_bytes () ) return SessionUpdateFile ( key = key )","title":"FileStrategy"},{"location":"all_strategies/#oteapi_aiida.strategies.download.FileStrategy.get","text":"Read local file. Source code in oteapi_aiida/strategies/download.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateFile : \"\"\"Read local file.\"\"\" filename = uri_to_path ( self . download_config . downloadUrl ) . resolve () if not filename . exists (): raise FileNotFoundError ( f \"File not found at { filename } \" ) cache = DataCache ( self . download_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( filename . read_text ( encoding = self . download_config . configuration . encoding ) if self . download_config . configuration . text else filename . read_bytes () ) return SessionUpdateFile ( key = key )","title":"get()"},{"location":"all_strategies/#oteapi_aiida.strategies.download.FileStrategy.initialize","text":"Initialize. Source code in oteapi_aiida/strategies/download.py 76 77 78 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"all_strategies/#oteapi_aiida.strategies.download.SessionUpdateFile","text":"Bases: SessionUpdate Class for returning values from Download File strategy. Source code in oteapi_aiida/strategies/download.py 58 59 60 61 class SessionUpdateFile ( SessionUpdate ): \"\"\"Class for returning values from Download File strategy.\"\"\" key : str = Field ( ... , description = \"Key to access the data in the cache.\" )","title":"SessionUpdateFile"},{"location":"all_strategies/#oteapi_aiida.strategies.filter","text":"Demo filter strategy.","title":"filter"},{"location":"all_strategies/#oteapi_aiida.strategies.filter.DemoDataModel","text":"Bases: AttrDict Demo filter data model. Source code in oteapi_aiida/strategies/filter.py 14 15 16 17 18 19 20 21 22 23 24 class DemoDataModel ( AttrDict ): \"\"\"Demo filter data model.\"\"\" demo_data : List [ int ] = Field ( ... , description = \"List of demo data.\" ) datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), )","title":"DemoDataModel"},{"location":"all_strategies/#oteapi_aiida.strategies.filter.DemoFilter","text":"Filter Strategy. Registers strategies : (\"filterType\", \"filter/DEMO\") Source code in oteapi_aiida/strategies/filter.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 @dataclass class DemoFilter : \"\"\"Filter Strategy. **Registers strategies**: - `(\"filterType\", \"filter/DEMO\")` \"\"\" filter_config : DemoFilterConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoFilter : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" cache = DataCache ( self . filter_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( self . filter_config . configuration . demo_data ) return SessionUpdateDemoFilter ( key = key ) def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"DemoFilter"},{"location":"all_strategies/#oteapi_aiida.strategies.filter.DemoFilter.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/filter.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"get()"},{"location":"all_strategies/#oteapi_aiida.strategies.filter.DemoFilter.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDemoFilter An update model of key/value-pairs to be stored in the SessionUpdateDemoFilter session-specific context from services. Source code in oteapi_aiida/strategies/filter.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoFilter : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" cache = DataCache ( self . filter_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( self . filter_config . configuration . demo_data ) return SessionUpdateDemoFilter ( key = key )","title":"initialize()"},{"location":"all_strategies/#oteapi_aiida.strategies.filter.DemoFilterConfig","text":"Bases: FilterConfig Demo filter strategy filter config. Source code in oteapi_aiida/strategies/filter.py 27 28 29 30 31 32 33 34 35 class DemoFilterConfig ( FilterConfig ): \"\"\"Demo filter strategy filter config.\"\"\" filterType : str = Field ( \"filter/DEMO\" , const = True , description = FilterConfig . __fields__ [ \"filterType\" ] . field_info . description , ) configuration : DemoDataModel = Field ( ... , description = \"Demo filter data model.\" )","title":"DemoFilterConfig"},{"location":"all_strategies/#oteapi_aiida.strategies.filter.SessionUpdateDemoFilter","text":"Bases: SessionUpdate Class for returning values from Download File strategy. Source code in oteapi_aiida/strategies/filter.py 38 39 40 41 class SessionUpdateDemoFilter ( SessionUpdate ): \"\"\"Class for returning values from Download File strategy.\"\"\" key : str = Field ( ... , description = \"Key to access the data in the cache.\" )","title":"SessionUpdateDemoFilter"},{"location":"all_strategies/#oteapi_aiida.strategies.function","text":"Demo function strategy class.","title":"function"},{"location":"all_strategies/#oteapi_aiida.strategies.function.DemoFunctionStrategy","text":"Function Strategy. Registers strategies : (\"functionType\", \"function/DEMO\") Source code in oteapi_aiida/strategies/function.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dataclass class DemoFunctionStrategy : \"\"\"Function Strategy. **Registers strategies**: - `(\"functionType\", \"function/DEMO\")` \"\"\" function_config : FunctionConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"DemoFunctionStrategy"},{"location":"all_strategies/#oteapi_aiida.strategies.function.DemoFunctionStrategy.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/function.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"get()"},{"location":"all_strategies/#oteapi_aiida.strategies.function.DemoFunctionStrategy.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/function.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"all_strategies/#oteapi_aiida.strategies.mapping","text":"Demo mapping strategy class.","title":"mapping"},{"location":"all_strategies/#oteapi_aiida.strategies.mapping.DemoMappingStrategy","text":"Mapping Strategy. Registers strategies : (\"mappingType\", \"mapping/DEMO\") Source code in oteapi_aiida/strategies/mapping.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dataclass class DemoMappingStrategy : \"\"\"Mapping Strategy. **Registers strategies**: - `(\"mappingType\", \"mapping/DEMO\")` \"\"\" mapping_config : MappingConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"DemoMappingStrategy"},{"location":"all_strategies/#oteapi_aiida.strategies.mapping.DemoMappingStrategy.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/mapping.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"get()"},{"location":"all_strategies/#oteapi_aiida.strategies.mapping.DemoMappingStrategy.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/mapping.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"all_strategies/#oteapi_aiida.strategies.parse","text":"Demo strategy class for text/json.","title":"parse"},{"location":"all_strategies/#oteapi_aiida.strategies.parse.DemoJSONDataParseStrategy","text":"Parse strategy for JSON. Registers strategies : (\"mediaType\", \"application/jsonDEMO\") Source code in oteapi_aiida/strategies/parse.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @dataclass class DemoJSONDataParseStrategy : \"\"\"Parse strategy for JSON. **Registers strategies**: - `(\"mediaType\", \"application/jsonDEMO\")` \"\"\" parse_config : JSONParseConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateJSONParse : \"\"\"Parse json.\"\"\" downloader = create_strategy ( \"download\" , self . parse_config ) output = downloader . get () cache = DataCache ( self . parse_config . configuration . datacache_config ) content = cache . get ( output [ \"key\" ]) if isinstance ( content , dict ): return SessionUpdateJSONParse ( content = content ) return SessionUpdateJSONParse ( content = json . loads ( content ))","title":"DemoJSONDataParseStrategy"},{"location":"all_strategies/#oteapi_aiida.strategies.parse.DemoJSONDataParseStrategy.get","text":"Parse json. Source code in oteapi_aiida/strategies/parse.py 63 64 65 66 67 68 69 70 71 72 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateJSONParse : \"\"\"Parse json.\"\"\" downloader = create_strategy ( \"download\" , self . parse_config ) output = downloader . get () cache = DataCache ( self . parse_config . configuration . datacache_config ) content = cache . get ( output [ \"key\" ]) if isinstance ( content , dict ): return SessionUpdateJSONParse ( content = content ) return SessionUpdateJSONParse ( content = json . loads ( content ))","title":"get()"},{"location":"all_strategies/#oteapi_aiida.strategies.parse.DemoJSONDataParseStrategy.initialize","text":"Initialize. Source code in oteapi_aiida/strategies/parse.py 59 60 61 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"all_strategies/#oteapi_aiida.strategies.parse.JSONConfig","text":"Bases: AttrDict JSON parse-specific Configuration Data Model. Source code in oteapi_aiida/strategies/parse.py 16 17 18 19 20 21 22 23 24 25 class JSONConfig ( AttrDict ): \"\"\"JSON parse-specific Configuration Data Model.\"\"\" datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), )","title":"JSONConfig"},{"location":"all_strategies/#oteapi_aiida.strategies.parse.JSONParseConfig","text":"Bases: ResourceConfig File download strategy filter config. Source code in oteapi_aiida/strategies/parse.py 28 29 30 31 32 33 34 35 36 37 38 class JSONParseConfig ( ResourceConfig ): \"\"\"File download strategy filter config.\"\"\" mediaType : str = Field ( \"application/jsonDEMO\" , const = True , description = ResourceConfig . __fields__ [ \"mediaType\" ] . field_info . description , ) configuration : JSONConfig = Field ( JSONConfig (), description = \"JSON parse strategy-specific configuration.\" )","title":"JSONParseConfig"},{"location":"all_strategies/#oteapi_aiida.strategies.parse.SessionUpdateJSONParse","text":"Bases: SessionUpdate Class for returning values from JSON Parse. Source code in oteapi_aiida/strategies/parse.py 41 42 43 44 class SessionUpdateJSONParse ( SessionUpdate ): \"\"\"Class for returning values from JSON Parse.\"\"\" content : dict = Field ( ... , description = \"Content of the JSON document.\" )","title":"SessionUpdateJSONParse"},{"location":"all_strategies/#oteapi_aiida.strategies.resource","text":"Demo resource strategy class.","title":"resource"},{"location":"all_strategies/#oteapi_aiida.strategies.resource.DemoConfig","text":"Bases: AttrDict Strategy-specific Configuration Data Model. Source code in oteapi_aiida/strategies/resource.py 14 15 16 17 18 19 20 class DemoConfig ( AttrDict ): \"\"\"Strategy-specific Configuration Data Model.\"\"\" datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = \"Configuration for the data cache.\" , )","title":"DemoConfig"},{"location":"all_strategies/#oteapi_aiida.strategies.resource.DemoResourceConfig","text":"Bases: ResourceConfig Demo resource strategy config. Source code in oteapi_aiida/strategies/resource.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class DemoResourceConfig ( ResourceConfig ): \"\"\"Demo resource strategy config.\"\"\" # Require the resource to be a REST API with JSON responses that uses the # DemoJSONDataParseStrategy strategy. mediaType : str = Field ( \"application/jsonDEMO\" , const = True , description = ResourceConfig . __fields__ [ \"mediaType\" ] . field_info . description , ) accessService : str = Field ( \"DEMO-access-service\" , const = True , description = ResourceConfig . __fields__ [ \"accessService\" ] . field_info . description , ) configuration : DemoConfig = Field ( DemoConfig (), description = \"Demo resource strategy-specific configuration.\" , )","title":"DemoResourceConfig"},{"location":"all_strategies/#oteapi_aiida.strategies.resource.DemoResourceStrategy","text":"Resource Strategy. Registers strategies : (\"accessService\", \"DEMO-access-service\") Source code in oteapi_aiida/strategies/resource.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 @dataclass class DemoResourceStrategy : \"\"\"Resource Strategy. **Registers strategies**: - `(\"accessService\", \"DEMO-access-service\")` \"\"\" resource_config : DemoResourceConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoResource : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" # Example of the plugin using a parse strategy to (fetch) and parse the data session = session if session else {} parse_config = self . resource_config . copy () if not parse_config . downloadUrl : parse_config . downloadUrl = self . resource_config . accessUrl session . update ( create_strategy ( \"parse\" , parse_config ) . initialize ( session )) session . update ( create_strategy ( \"parse\" , parse_config ) . get ( session )) if \"content\" not in session : raise ValueError ( f \"Expected the parse strategy for { self . resource_config . mediaType !r} \" \"to return a session with a 'content' key.\" ) return SessionUpdateDemoResource ( output = session [ \"content\" ])","title":"DemoResourceStrategy"},{"location":"all_strategies/#oteapi_aiida.strategies.resource.DemoResourceStrategy.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDemoResource An update model of key/value-pairs to be stored in the SessionUpdateDemoResource session-specific context from services. Source code in oteapi_aiida/strategies/resource.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoResource : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" # Example of the plugin using a parse strategy to (fetch) and parse the data session = session if session else {} parse_config = self . resource_config . copy () if not parse_config . downloadUrl : parse_config . downloadUrl = self . resource_config . accessUrl session . update ( create_strategy ( \"parse\" , parse_config ) . initialize ( session )) session . update ( create_strategy ( \"parse\" , parse_config ) . get ( session )) if \"content\" not in session : raise ValueError ( f \"Expected the parse strategy for { self . resource_config . mediaType !r} \" \"to return a session with a 'content' key.\" ) return SessionUpdateDemoResource ( output = session [ \"content\" ])","title":"get()"},{"location":"all_strategies/#oteapi_aiida.strategies.resource.DemoResourceStrategy.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/resource.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"all_strategies/#oteapi_aiida.strategies.resource.SessionUpdateDemoResource","text":"Bases: SessionUpdate Class for returning values from Demo Resource strategy. Source code in oteapi_aiida/strategies/resource.py 45 46 47 48 49 50 51 52 53 class SessionUpdateDemoResource ( SessionUpdate ): \"\"\"Class for returning values from Demo Resource strategy.\"\"\" output : dict = Field ( ... , description = ( \"The output from downloading the response from the given `accessUrl`.\" ), )","title":"SessionUpdateDemoResource"},{"location":"all_strategies/#oteapi_aiida.strategies.transformation","text":"Demo transformation strategy class.","title":"transformation"},{"location":"all_strategies/#oteapi_aiida.strategies.transformation.DummyTransformationStrategy","text":"Transformation Strategy. Registers strategies : (\"transformationType\", \"script/DEMO\") Source code in oteapi_aiida/strategies/transformation.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 @dataclass class DummyTransformationStrategy : \"\"\"Transformation Strategy. **Registers strategies**: - `(\"transformationType\", \"script/DEMO\")` \"\"\" transformation_config : TransformationConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def run ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDummyTransformation : \"\"\"Run a transformation job. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. As a minimum, the dictionary will contain the job ID. \"\"\" return SessionUpdateDummyTransformation ( result = \"a01d\" ) def status ( self , task_id : str ) -> TransformationStatus : \"\"\"Get job status. Parameters: task_id: The transformation job ID. Returns: An overview of the transformation job's status, including relevant metadata. \"\"\" return TransformationStatus ( id = task_id , status = \"wip\" , messages = [], created = datetime . utcnow (), startTime = datetime . utcnow (), finishTime = datetime . utcnow (), )","title":"DummyTransformationStrategy"},{"location":"all_strategies/#oteapi_aiida.strategies.transformation.DummyTransformationStrategy.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/transformation.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"get()"},{"location":"all_strategies/#oteapi_aiida.strategies.transformation.DummyTransformationStrategy.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/transformation.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"all_strategies/#oteapi_aiida.strategies.transformation.DummyTransformationStrategy.run","text":"Run a transformation job. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDummyTransformation An update model of key/value-pairs to be stored in the SessionUpdateDummyTransformation session-specific context from services. SessionUpdateDummyTransformation As a minimum, the dictionary will contain the job ID. Source code in oteapi_aiida/strategies/transformation.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def run ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDummyTransformation : \"\"\"Run a transformation job. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. As a minimum, the dictionary will contain the job ID. \"\"\" return SessionUpdateDummyTransformation ( result = \"a01d\" )","title":"run()"},{"location":"all_strategies/#oteapi_aiida.strategies.transformation.DummyTransformationStrategy.status","text":"Get job status. Parameters: Name Type Description Default task_id str The transformation job ID. required Returns: Type Description TransformationStatus An overview of the transformation job's status, including relevant TransformationStatus metadata. Source code in oteapi_aiida/strategies/transformation.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 def status ( self , task_id : str ) -> TransformationStatus : \"\"\"Get job status. Parameters: task_id: The transformation job ID. Returns: An overview of the transformation job's status, including relevant metadata. \"\"\" return TransformationStatus ( id = task_id , status = \"wip\" , messages = [], created = datetime . utcnow (), startTime = datetime . utcnow (), finishTime = datetime . utcnow (), )","title":"status()"},{"location":"all_strategies/#oteapi_aiida.strategies.transformation.SessionUpdateDummyTransformation","text":"Bases: SessionUpdate Class for returning values from Dummy Transformation strategy. Source code in oteapi_aiida/strategies/transformation.py 14 15 16 17 class SessionUpdateDummyTransformation ( SessionUpdate ): \"\"\"Class for returning values from Dummy Transformation strategy.\"\"\" result : str = Field ( ... , description = \"The job ID.\" )","title":"SessionUpdateDummyTransformation"},{"location":"api_reference/strategies/download/","text":"download \u00b6 Demo download strategy class for file. FileConfig \u00b6 Bases: AttrDict File-specific Configuration Data Model. Source code in oteapi_aiida/strategies/download.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class FileConfig ( AttrDict ): \"\"\"File-specific Configuration Data Model.\"\"\" text : bool = Field ( False , description = ( \"Whether the file should be opened in text mode. If `False`, the file will\" \" be opened in bytes mode.\" ), ) encoding : Optional [ str ] = Field ( None , description = ( \"Encoding used when opening the file. The default is platform dependent.\" ), ) datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), ) FileResourceConfig \u00b6 Bases: ResourceConfig File download strategy filter config. Source code in oteapi_aiida/strategies/download.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class FileResourceConfig ( ResourceConfig ): \"\"\"File download strategy filter config.\"\"\" downloadUrl : FileUrl = Field ( # type: ignore[assignment] ... , description = \"The file URL, which will be downloaded.\" ) configuration : FileConfig = Field ( FileConfig (), description = \"File download strategy-specific configuration.\" ) @validator ( \"downloadUrl\" ) def ensure_path_exists ( cls , value : FileUrl ) -> FileUrl : \"\"\"Ensure `path` is defined in `downloadUrl`.\"\"\" if not value . path : raise ValueError ( \"downloadUrl must contain a `path` part.\" ) return value ensure_path_exists ( value ) \u00b6 Ensure path is defined in downloadUrl . Source code in oteapi_aiida/strategies/download.py 50 51 52 53 54 55 @validator ( \"downloadUrl\" ) def ensure_path_exists ( cls , value : FileUrl ) -> FileUrl : \"\"\"Ensure `path` is defined in `downloadUrl`.\"\"\" if not value . path : raise ValueError ( \"downloadUrl must contain a `path` part.\" ) return value FileStrategy \u00b6 Strategy for retrieving data from a local file. Registers strategies : (\"scheme\", \"fileDEMO\") Source code in oteapi_aiida/strategies/download.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @dataclass class FileStrategy : \"\"\"Strategy for retrieving data from a local file. **Registers strategies**: - `(\"scheme\", \"fileDEMO\")` \"\"\" download_config : FileResourceConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateFile : \"\"\"Read local file.\"\"\" filename = uri_to_path ( self . download_config . downloadUrl ) . resolve () if not filename . exists (): raise FileNotFoundError ( f \"File not found at { filename } \" ) cache = DataCache ( self . download_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( filename . read_text ( encoding = self . download_config . configuration . encoding ) if self . download_config . configuration . text else filename . read_bytes () ) return SessionUpdateFile ( key = key ) get ( session = None ) \u00b6 Read local file. Source code in oteapi_aiida/strategies/download.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateFile : \"\"\"Read local file.\"\"\" filename = uri_to_path ( self . download_config . downloadUrl ) . resolve () if not filename . exists (): raise FileNotFoundError ( f \"File not found at { filename } \" ) cache = DataCache ( self . download_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( filename . read_text ( encoding = self . download_config . configuration . encoding ) if self . download_config . configuration . text else filename . read_bytes () ) return SessionUpdateFile ( key = key ) initialize ( session = None ) \u00b6 Initialize. Source code in oteapi_aiida/strategies/download.py 76 77 78 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () SessionUpdateFile \u00b6 Bases: SessionUpdate Class for returning values from Download File strategy. Source code in oteapi_aiida/strategies/download.py 58 59 60 61 class SessionUpdateFile ( SessionUpdate ): \"\"\"Class for returning values from Download File strategy.\"\"\" key : str = Field ( ... , description = \"Key to access the data in the cache.\" )","title":"download"},{"location":"api_reference/strategies/download/#download","text":"Demo download strategy class for file.","title":"download"},{"location":"api_reference/strategies/download/#oteapi_aiida.strategies.download.FileConfig","text":"Bases: AttrDict File-specific Configuration Data Model. Source code in oteapi_aiida/strategies/download.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class FileConfig ( AttrDict ): \"\"\"File-specific Configuration Data Model.\"\"\" text : bool = Field ( False , description = ( \"Whether the file should be opened in text mode. If `False`, the file will\" \" be opened in bytes mode.\" ), ) encoding : Optional [ str ] = Field ( None , description = ( \"Encoding used when opening the file. The default is platform dependent.\" ), ) datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), )","title":"FileConfig"},{"location":"api_reference/strategies/download/#oteapi_aiida.strategies.download.FileResourceConfig","text":"Bases: ResourceConfig File download strategy filter config. Source code in oteapi_aiida/strategies/download.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class FileResourceConfig ( ResourceConfig ): \"\"\"File download strategy filter config.\"\"\" downloadUrl : FileUrl = Field ( # type: ignore[assignment] ... , description = \"The file URL, which will be downloaded.\" ) configuration : FileConfig = Field ( FileConfig (), description = \"File download strategy-specific configuration.\" ) @validator ( \"downloadUrl\" ) def ensure_path_exists ( cls , value : FileUrl ) -> FileUrl : \"\"\"Ensure `path` is defined in `downloadUrl`.\"\"\" if not value . path : raise ValueError ( \"downloadUrl must contain a `path` part.\" ) return value","title":"FileResourceConfig"},{"location":"api_reference/strategies/download/#oteapi_aiida.strategies.download.FileResourceConfig.ensure_path_exists","text":"Ensure path is defined in downloadUrl . Source code in oteapi_aiida/strategies/download.py 50 51 52 53 54 55 @validator ( \"downloadUrl\" ) def ensure_path_exists ( cls , value : FileUrl ) -> FileUrl : \"\"\"Ensure `path` is defined in `downloadUrl`.\"\"\" if not value . path : raise ValueError ( \"downloadUrl must contain a `path` part.\" ) return value","title":"ensure_path_exists()"},{"location":"api_reference/strategies/download/#oteapi_aiida.strategies.download.FileStrategy","text":"Strategy for retrieving data from a local file. Registers strategies : (\"scheme\", \"fileDEMO\") Source code in oteapi_aiida/strategies/download.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @dataclass class FileStrategy : \"\"\"Strategy for retrieving data from a local file. **Registers strategies**: - `(\"scheme\", \"fileDEMO\")` \"\"\" download_config : FileResourceConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateFile : \"\"\"Read local file.\"\"\" filename = uri_to_path ( self . download_config . downloadUrl ) . resolve () if not filename . exists (): raise FileNotFoundError ( f \"File not found at { filename } \" ) cache = DataCache ( self . download_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( filename . read_text ( encoding = self . download_config . configuration . encoding ) if self . download_config . configuration . text else filename . read_bytes () ) return SessionUpdateFile ( key = key )","title":"FileStrategy"},{"location":"api_reference/strategies/download/#oteapi_aiida.strategies.download.FileStrategy.get","text":"Read local file. Source code in oteapi_aiida/strategies/download.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateFile : \"\"\"Read local file.\"\"\" filename = uri_to_path ( self . download_config . downloadUrl ) . resolve () if not filename . exists (): raise FileNotFoundError ( f \"File not found at { filename } \" ) cache = DataCache ( self . download_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( filename . read_text ( encoding = self . download_config . configuration . encoding ) if self . download_config . configuration . text else filename . read_bytes () ) return SessionUpdateFile ( key = key )","title":"get()"},{"location":"api_reference/strategies/download/#oteapi_aiida.strategies.download.FileStrategy.initialize","text":"Initialize. Source code in oteapi_aiida/strategies/download.py 76 77 78 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"api_reference/strategies/download/#oteapi_aiida.strategies.download.SessionUpdateFile","text":"Bases: SessionUpdate Class for returning values from Download File strategy. Source code in oteapi_aiida/strategies/download.py 58 59 60 61 class SessionUpdateFile ( SessionUpdate ): \"\"\"Class for returning values from Download File strategy.\"\"\" key : str = Field ( ... , description = \"Key to access the data in the cache.\" )","title":"SessionUpdateFile"},{"location":"api_reference/strategies/filter/","text":"filter \u00b6 Demo filter strategy. DemoDataModel \u00b6 Bases: AttrDict Demo filter data model. Source code in oteapi_aiida/strategies/filter.py 14 15 16 17 18 19 20 21 22 23 24 class DemoDataModel ( AttrDict ): \"\"\"Demo filter data model.\"\"\" demo_data : List [ int ] = Field ( ... , description = \"List of demo data.\" ) datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), ) DemoFilter \u00b6 Filter Strategy. Registers strategies : (\"filterType\", \"filter/DEMO\") Source code in oteapi_aiida/strategies/filter.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 @dataclass class DemoFilter : \"\"\"Filter Strategy. **Registers strategies**: - `(\"filterType\", \"filter/DEMO\")` \"\"\" filter_config : DemoFilterConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoFilter : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" cache = DataCache ( self . filter_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( self . filter_config . configuration . demo_data ) return SessionUpdateDemoFilter ( key = key ) def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/filter.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDemoFilter An update model of key/value-pairs to be stored in the SessionUpdateDemoFilter session-specific context from services. Source code in oteapi_aiida/strategies/filter.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoFilter : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" cache = DataCache ( self . filter_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( self . filter_config . configuration . demo_data ) return SessionUpdateDemoFilter ( key = key ) DemoFilterConfig \u00b6 Bases: FilterConfig Demo filter strategy filter config. Source code in oteapi_aiida/strategies/filter.py 27 28 29 30 31 32 33 34 35 class DemoFilterConfig ( FilterConfig ): \"\"\"Demo filter strategy filter config.\"\"\" filterType : str = Field ( \"filter/DEMO\" , const = True , description = FilterConfig . __fields__ [ \"filterType\" ] . field_info . description , ) configuration : DemoDataModel = Field ( ... , description = \"Demo filter data model.\" ) SessionUpdateDemoFilter \u00b6 Bases: SessionUpdate Class for returning values from Download File strategy. Source code in oteapi_aiida/strategies/filter.py 38 39 40 41 class SessionUpdateDemoFilter ( SessionUpdate ): \"\"\"Class for returning values from Download File strategy.\"\"\" key : str = Field ( ... , description = \"Key to access the data in the cache.\" )","title":"filter"},{"location":"api_reference/strategies/filter/#filter","text":"Demo filter strategy.","title":"filter"},{"location":"api_reference/strategies/filter/#oteapi_aiida.strategies.filter.DemoDataModel","text":"Bases: AttrDict Demo filter data model. Source code in oteapi_aiida/strategies/filter.py 14 15 16 17 18 19 20 21 22 23 24 class DemoDataModel ( AttrDict ): \"\"\"Demo filter data model.\"\"\" demo_data : List [ int ] = Field ( ... , description = \"List of demo data.\" ) datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), )","title":"DemoDataModel"},{"location":"api_reference/strategies/filter/#oteapi_aiida.strategies.filter.DemoFilter","text":"Filter Strategy. Registers strategies : (\"filterType\", \"filter/DEMO\") Source code in oteapi_aiida/strategies/filter.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 @dataclass class DemoFilter : \"\"\"Filter Strategy. **Registers strategies**: - `(\"filterType\", \"filter/DEMO\")` \"\"\" filter_config : DemoFilterConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoFilter : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" cache = DataCache ( self . filter_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( self . filter_config . configuration . demo_data ) return SessionUpdateDemoFilter ( key = key ) def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"DemoFilter"},{"location":"api_reference/strategies/filter/#oteapi_aiida.strategies.filter.DemoFilter.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/filter.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"get()"},{"location":"api_reference/strategies/filter/#oteapi_aiida.strategies.filter.DemoFilter.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDemoFilter An update model of key/value-pairs to be stored in the SessionUpdateDemoFilter session-specific context from services. Source code in oteapi_aiida/strategies/filter.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoFilter : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" cache = DataCache ( self . filter_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( self . filter_config . configuration . demo_data ) return SessionUpdateDemoFilter ( key = key )","title":"initialize()"},{"location":"api_reference/strategies/filter/#oteapi_aiida.strategies.filter.DemoFilterConfig","text":"Bases: FilterConfig Demo filter strategy filter config. Source code in oteapi_aiida/strategies/filter.py 27 28 29 30 31 32 33 34 35 class DemoFilterConfig ( FilterConfig ): \"\"\"Demo filter strategy filter config.\"\"\" filterType : str = Field ( \"filter/DEMO\" , const = True , description = FilterConfig . __fields__ [ \"filterType\" ] . field_info . description , ) configuration : DemoDataModel = Field ( ... , description = \"Demo filter data model.\" )","title":"DemoFilterConfig"},{"location":"api_reference/strategies/filter/#oteapi_aiida.strategies.filter.SessionUpdateDemoFilter","text":"Bases: SessionUpdate Class for returning values from Download File strategy. Source code in oteapi_aiida/strategies/filter.py 38 39 40 41 class SessionUpdateDemoFilter ( SessionUpdate ): \"\"\"Class for returning values from Download File strategy.\"\"\" key : str = Field ( ... , description = \"Key to access the data in the cache.\" )","title":"SessionUpdateDemoFilter"},{"location":"api_reference/strategies/function/","text":"function \u00b6 Demo function strategy class. DemoFunctionStrategy \u00b6 Function Strategy. Registers strategies : (\"functionType\", \"function/DEMO\") Source code in oteapi_aiida/strategies/function.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dataclass class DemoFunctionStrategy : \"\"\"Function Strategy. **Registers strategies**: - `(\"functionType\", \"function/DEMO\")` \"\"\" function_config : FunctionConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/function.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/function.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"function"},{"location":"api_reference/strategies/function/#function","text":"Demo function strategy class.","title":"function"},{"location":"api_reference/strategies/function/#oteapi_aiida.strategies.function.DemoFunctionStrategy","text":"Function Strategy. Registers strategies : (\"functionType\", \"function/DEMO\") Source code in oteapi_aiida/strategies/function.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dataclass class DemoFunctionStrategy : \"\"\"Function Strategy. **Registers strategies**: - `(\"functionType\", \"function/DEMO\")` \"\"\" function_config : FunctionConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"DemoFunctionStrategy"},{"location":"api_reference/strategies/function/#oteapi_aiida.strategies.function.DemoFunctionStrategy.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/function.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"get()"},{"location":"api_reference/strategies/function/#oteapi_aiida.strategies.function.DemoFunctionStrategy.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/function.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"api_reference/strategies/mapping/","text":"mapping \u00b6 Demo mapping strategy class. DemoMappingStrategy \u00b6 Mapping Strategy. Registers strategies : (\"mappingType\", \"mapping/DEMO\") Source code in oteapi_aiida/strategies/mapping.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dataclass class DemoMappingStrategy : \"\"\"Mapping Strategy. **Registers strategies**: - `(\"mappingType\", \"mapping/DEMO\")` \"\"\" mapping_config : MappingConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/mapping.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/mapping.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"mapping"},{"location":"api_reference/strategies/mapping/#mapping","text":"Demo mapping strategy class.","title":"mapping"},{"location":"api_reference/strategies/mapping/#oteapi_aiida.strategies.mapping.DemoMappingStrategy","text":"Mapping Strategy. Registers strategies : (\"mappingType\", \"mapping/DEMO\") Source code in oteapi_aiida/strategies/mapping.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dataclass class DemoMappingStrategy : \"\"\"Mapping Strategy. **Registers strategies**: - `(\"mappingType\", \"mapping/DEMO\")` \"\"\" mapping_config : MappingConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"DemoMappingStrategy"},{"location":"api_reference/strategies/mapping/#oteapi_aiida.strategies.mapping.DemoMappingStrategy.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/mapping.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"get()"},{"location":"api_reference/strategies/mapping/#oteapi_aiida.strategies.mapping.DemoMappingStrategy.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/mapping.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"api_reference/strategies/parse/","text":"parse \u00b6 Demo strategy class for text/json. DemoJSONDataParseStrategy \u00b6 Parse strategy for JSON. Registers strategies : (\"mediaType\", \"application/jsonDEMO\") Source code in oteapi_aiida/strategies/parse.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @dataclass class DemoJSONDataParseStrategy : \"\"\"Parse strategy for JSON. **Registers strategies**: - `(\"mediaType\", \"application/jsonDEMO\")` \"\"\" parse_config : JSONParseConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateJSONParse : \"\"\"Parse json.\"\"\" downloader = create_strategy ( \"download\" , self . parse_config ) output = downloader . get () cache = DataCache ( self . parse_config . configuration . datacache_config ) content = cache . get ( output [ \"key\" ]) if isinstance ( content , dict ): return SessionUpdateJSONParse ( content = content ) return SessionUpdateJSONParse ( content = json . loads ( content )) get ( session = None ) \u00b6 Parse json. Source code in oteapi_aiida/strategies/parse.py 63 64 65 66 67 68 69 70 71 72 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateJSONParse : \"\"\"Parse json.\"\"\" downloader = create_strategy ( \"download\" , self . parse_config ) output = downloader . get () cache = DataCache ( self . parse_config . configuration . datacache_config ) content = cache . get ( output [ \"key\" ]) if isinstance ( content , dict ): return SessionUpdateJSONParse ( content = content ) return SessionUpdateJSONParse ( content = json . loads ( content )) initialize ( session = None ) \u00b6 Initialize. Source code in oteapi_aiida/strategies/parse.py 59 60 61 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () JSONConfig \u00b6 Bases: AttrDict JSON parse-specific Configuration Data Model. Source code in oteapi_aiida/strategies/parse.py 16 17 18 19 20 21 22 23 24 25 class JSONConfig ( AttrDict ): \"\"\"JSON parse-specific Configuration Data Model.\"\"\" datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), ) JSONParseConfig \u00b6 Bases: ResourceConfig File download strategy filter config. Source code in oteapi_aiida/strategies/parse.py 28 29 30 31 32 33 34 35 36 37 38 class JSONParseConfig ( ResourceConfig ): \"\"\"File download strategy filter config.\"\"\" mediaType : str = Field ( \"application/jsonDEMO\" , const = True , description = ResourceConfig . __fields__ [ \"mediaType\" ] . field_info . description , ) configuration : JSONConfig = Field ( JSONConfig (), description = \"JSON parse strategy-specific configuration.\" ) SessionUpdateJSONParse \u00b6 Bases: SessionUpdate Class for returning values from JSON Parse. Source code in oteapi_aiida/strategies/parse.py 41 42 43 44 class SessionUpdateJSONParse ( SessionUpdate ): \"\"\"Class for returning values from JSON Parse.\"\"\" content : dict = Field ( ... , description = \"Content of the JSON document.\" )","title":"parse"},{"location":"api_reference/strategies/parse/#parse","text":"Demo strategy class for text/json.","title":"parse"},{"location":"api_reference/strategies/parse/#oteapi_aiida.strategies.parse.DemoJSONDataParseStrategy","text":"Parse strategy for JSON. Registers strategies : (\"mediaType\", \"application/jsonDEMO\") Source code in oteapi_aiida/strategies/parse.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @dataclass class DemoJSONDataParseStrategy : \"\"\"Parse strategy for JSON. **Registers strategies**: - `(\"mediaType\", \"application/jsonDEMO\")` \"\"\" parse_config : JSONParseConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateJSONParse : \"\"\"Parse json.\"\"\" downloader = create_strategy ( \"download\" , self . parse_config ) output = downloader . get () cache = DataCache ( self . parse_config . configuration . datacache_config ) content = cache . get ( output [ \"key\" ]) if isinstance ( content , dict ): return SessionUpdateJSONParse ( content = content ) return SessionUpdateJSONParse ( content = json . loads ( content ))","title":"DemoJSONDataParseStrategy"},{"location":"api_reference/strategies/parse/#oteapi_aiida.strategies.parse.DemoJSONDataParseStrategy.get","text":"Parse json. Source code in oteapi_aiida/strategies/parse.py 63 64 65 66 67 68 69 70 71 72 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateJSONParse : \"\"\"Parse json.\"\"\" downloader = create_strategy ( \"download\" , self . parse_config ) output = downloader . get () cache = DataCache ( self . parse_config . configuration . datacache_config ) content = cache . get ( output [ \"key\" ]) if isinstance ( content , dict ): return SessionUpdateJSONParse ( content = content ) return SessionUpdateJSONParse ( content = json . loads ( content ))","title":"get()"},{"location":"api_reference/strategies/parse/#oteapi_aiida.strategies.parse.DemoJSONDataParseStrategy.initialize","text":"Initialize. Source code in oteapi_aiida/strategies/parse.py 59 60 61 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"api_reference/strategies/parse/#oteapi_aiida.strategies.parse.JSONConfig","text":"Bases: AttrDict JSON parse-specific Configuration Data Model. Source code in oteapi_aiida/strategies/parse.py 16 17 18 19 20 21 22 23 24 25 class JSONConfig ( AttrDict ): \"\"\"JSON parse-specific Configuration Data Model.\"\"\" datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), )","title":"JSONConfig"},{"location":"api_reference/strategies/parse/#oteapi_aiida.strategies.parse.JSONParseConfig","text":"Bases: ResourceConfig File download strategy filter config. Source code in oteapi_aiida/strategies/parse.py 28 29 30 31 32 33 34 35 36 37 38 class JSONParseConfig ( ResourceConfig ): \"\"\"File download strategy filter config.\"\"\" mediaType : str = Field ( \"application/jsonDEMO\" , const = True , description = ResourceConfig . __fields__ [ \"mediaType\" ] . field_info . description , ) configuration : JSONConfig = Field ( JSONConfig (), description = \"JSON parse strategy-specific configuration.\" )","title":"JSONParseConfig"},{"location":"api_reference/strategies/parse/#oteapi_aiida.strategies.parse.SessionUpdateJSONParse","text":"Bases: SessionUpdate Class for returning values from JSON Parse. Source code in oteapi_aiida/strategies/parse.py 41 42 43 44 class SessionUpdateJSONParse ( SessionUpdate ): \"\"\"Class for returning values from JSON Parse.\"\"\" content : dict = Field ( ... , description = \"Content of the JSON document.\" )","title":"SessionUpdateJSONParse"},{"location":"api_reference/strategies/resource/","text":"resource \u00b6 Demo resource strategy class. DemoConfig \u00b6 Bases: AttrDict Strategy-specific Configuration Data Model. Source code in oteapi_aiida/strategies/resource.py 14 15 16 17 18 19 20 class DemoConfig ( AttrDict ): \"\"\"Strategy-specific Configuration Data Model.\"\"\" datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = \"Configuration for the data cache.\" , ) DemoResourceConfig \u00b6 Bases: ResourceConfig Demo resource strategy config. Source code in oteapi_aiida/strategies/resource.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class DemoResourceConfig ( ResourceConfig ): \"\"\"Demo resource strategy config.\"\"\" # Require the resource to be a REST API with JSON responses that uses the # DemoJSONDataParseStrategy strategy. mediaType : str = Field ( \"application/jsonDEMO\" , const = True , description = ResourceConfig . __fields__ [ \"mediaType\" ] . field_info . description , ) accessService : str = Field ( \"DEMO-access-service\" , const = True , description = ResourceConfig . __fields__ [ \"accessService\" ] . field_info . description , ) configuration : DemoConfig = Field ( DemoConfig (), description = \"Demo resource strategy-specific configuration.\" , ) DemoResourceStrategy \u00b6 Resource Strategy. Registers strategies : (\"accessService\", \"DEMO-access-service\") Source code in oteapi_aiida/strategies/resource.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 @dataclass class DemoResourceStrategy : \"\"\"Resource Strategy. **Registers strategies**: - `(\"accessService\", \"DEMO-access-service\")` \"\"\" resource_config : DemoResourceConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoResource : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" # Example of the plugin using a parse strategy to (fetch) and parse the data session = session if session else {} parse_config = self . resource_config . copy () if not parse_config . downloadUrl : parse_config . downloadUrl = self . resource_config . accessUrl session . update ( create_strategy ( \"parse\" , parse_config ) . initialize ( session )) session . update ( create_strategy ( \"parse\" , parse_config ) . get ( session )) if \"content\" not in session : raise ValueError ( f \"Expected the parse strategy for { self . resource_config . mediaType !r} \" \"to return a session with a 'content' key.\" ) return SessionUpdateDemoResource ( output = session [ \"content\" ]) get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDemoResource An update model of key/value-pairs to be stored in the SessionUpdateDemoResource session-specific context from services. Source code in oteapi_aiida/strategies/resource.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoResource : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" # Example of the plugin using a parse strategy to (fetch) and parse the data session = session if session else {} parse_config = self . resource_config . copy () if not parse_config . downloadUrl : parse_config . downloadUrl = self . resource_config . accessUrl session . update ( create_strategy ( \"parse\" , parse_config ) . initialize ( session )) session . update ( create_strategy ( \"parse\" , parse_config ) . get ( session )) if \"content\" not in session : raise ValueError ( f \"Expected the parse strategy for { self . resource_config . mediaType !r} \" \"to return a session with a 'content' key.\" ) return SessionUpdateDemoResource ( output = session [ \"content\" ]) initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/resource.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () SessionUpdateDemoResource \u00b6 Bases: SessionUpdate Class for returning values from Demo Resource strategy. Source code in oteapi_aiida/strategies/resource.py 45 46 47 48 49 50 51 52 53 class SessionUpdateDemoResource ( SessionUpdate ): \"\"\"Class for returning values from Demo Resource strategy.\"\"\" output : dict = Field ( ... , description = ( \"The output from downloading the response from the given `accessUrl`.\" ), )","title":"resource"},{"location":"api_reference/strategies/resource/#resource","text":"Demo resource strategy class.","title":"resource"},{"location":"api_reference/strategies/resource/#oteapi_aiida.strategies.resource.DemoConfig","text":"Bases: AttrDict Strategy-specific Configuration Data Model. Source code in oteapi_aiida/strategies/resource.py 14 15 16 17 18 19 20 class DemoConfig ( AttrDict ): \"\"\"Strategy-specific Configuration Data Model.\"\"\" datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = \"Configuration for the data cache.\" , )","title":"DemoConfig"},{"location":"api_reference/strategies/resource/#oteapi_aiida.strategies.resource.DemoResourceConfig","text":"Bases: ResourceConfig Demo resource strategy config. Source code in oteapi_aiida/strategies/resource.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class DemoResourceConfig ( ResourceConfig ): \"\"\"Demo resource strategy config.\"\"\" # Require the resource to be a REST API with JSON responses that uses the # DemoJSONDataParseStrategy strategy. mediaType : str = Field ( \"application/jsonDEMO\" , const = True , description = ResourceConfig . __fields__ [ \"mediaType\" ] . field_info . description , ) accessService : str = Field ( \"DEMO-access-service\" , const = True , description = ResourceConfig . __fields__ [ \"accessService\" ] . field_info . description , ) configuration : DemoConfig = Field ( DemoConfig (), description = \"Demo resource strategy-specific configuration.\" , )","title":"DemoResourceConfig"},{"location":"api_reference/strategies/resource/#oteapi_aiida.strategies.resource.DemoResourceStrategy","text":"Resource Strategy. Registers strategies : (\"accessService\", \"DEMO-access-service\") Source code in oteapi_aiida/strategies/resource.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 @dataclass class DemoResourceStrategy : \"\"\"Resource Strategy. **Registers strategies**: - `(\"accessService\", \"DEMO-access-service\")` \"\"\" resource_config : DemoResourceConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoResource : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" # Example of the plugin using a parse strategy to (fetch) and parse the data session = session if session else {} parse_config = self . resource_config . copy () if not parse_config . downloadUrl : parse_config . downloadUrl = self . resource_config . accessUrl session . update ( create_strategy ( \"parse\" , parse_config ) . initialize ( session )) session . update ( create_strategy ( \"parse\" , parse_config ) . get ( session )) if \"content\" not in session : raise ValueError ( f \"Expected the parse strategy for { self . resource_config . mediaType !r} \" \"to return a session with a 'content' key.\" ) return SessionUpdateDemoResource ( output = session [ \"content\" ])","title":"DemoResourceStrategy"},{"location":"api_reference/strategies/resource/#oteapi_aiida.strategies.resource.DemoResourceStrategy.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDemoResource An update model of key/value-pairs to be stored in the SessionUpdateDemoResource session-specific context from services. Source code in oteapi_aiida/strategies/resource.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoResource : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" # Example of the plugin using a parse strategy to (fetch) and parse the data session = session if session else {} parse_config = self . resource_config . copy () if not parse_config . downloadUrl : parse_config . downloadUrl = self . resource_config . accessUrl session . update ( create_strategy ( \"parse\" , parse_config ) . initialize ( session )) session . update ( create_strategy ( \"parse\" , parse_config ) . get ( session )) if \"content\" not in session : raise ValueError ( f \"Expected the parse strategy for { self . resource_config . mediaType !r} \" \"to return a session with a 'content' key.\" ) return SessionUpdateDemoResource ( output = session [ \"content\" ])","title":"get()"},{"location":"api_reference/strategies/resource/#oteapi_aiida.strategies.resource.DemoResourceStrategy.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/resource.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"api_reference/strategies/resource/#oteapi_aiida.strategies.resource.SessionUpdateDemoResource","text":"Bases: SessionUpdate Class for returning values from Demo Resource strategy. Source code in oteapi_aiida/strategies/resource.py 45 46 47 48 49 50 51 52 53 class SessionUpdateDemoResource ( SessionUpdate ): \"\"\"Class for returning values from Demo Resource strategy.\"\"\" output : dict = Field ( ... , description = ( \"The output from downloading the response from the given `accessUrl`.\" ), )","title":"SessionUpdateDemoResource"},{"location":"api_reference/strategies/transformation/","text":"transformation \u00b6 Demo transformation strategy class. DummyTransformationStrategy \u00b6 Transformation Strategy. Registers strategies : (\"transformationType\", \"script/DEMO\") Source code in oteapi_aiida/strategies/transformation.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 @dataclass class DummyTransformationStrategy : \"\"\"Transformation Strategy. **Registers strategies**: - `(\"transformationType\", \"script/DEMO\")` \"\"\" transformation_config : TransformationConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def run ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDummyTransformation : \"\"\"Run a transformation job. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. As a minimum, the dictionary will contain the job ID. \"\"\" return SessionUpdateDummyTransformation ( result = \"a01d\" ) def status ( self , task_id : str ) -> TransformationStatus : \"\"\"Get job status. Parameters: task_id: The transformation job ID. Returns: An overview of the transformation job's status, including relevant metadata. \"\"\" return TransformationStatus ( id = task_id , status = \"wip\" , messages = [], created = datetime . utcnow (), startTime = datetime . utcnow (), finishTime = datetime . utcnow (), ) get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/transformation.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/transformation.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () run ( session = None ) \u00b6 Run a transformation job. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDummyTransformation An update model of key/value-pairs to be stored in the SessionUpdateDummyTransformation session-specific context from services. SessionUpdateDummyTransformation As a minimum, the dictionary will contain the job ID. Source code in oteapi_aiida/strategies/transformation.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def run ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDummyTransformation : \"\"\"Run a transformation job. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. As a minimum, the dictionary will contain the job ID. \"\"\" return SessionUpdateDummyTransformation ( result = \"a01d\" ) status ( task_id ) \u00b6 Get job status. Parameters: Name Type Description Default task_id str The transformation job ID. required Returns: Type Description TransformationStatus An overview of the transformation job's status, including relevant TransformationStatus metadata. Source code in oteapi_aiida/strategies/transformation.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 def status ( self , task_id : str ) -> TransformationStatus : \"\"\"Get job status. Parameters: task_id: The transformation job ID. Returns: An overview of the transformation job's status, including relevant metadata. \"\"\" return TransformationStatus ( id = task_id , status = \"wip\" , messages = [], created = datetime . utcnow (), startTime = datetime . utcnow (), finishTime = datetime . utcnow (), ) SessionUpdateDummyTransformation \u00b6 Bases: SessionUpdate Class for returning values from Dummy Transformation strategy. Source code in oteapi_aiida/strategies/transformation.py 14 15 16 17 class SessionUpdateDummyTransformation ( SessionUpdate ): \"\"\"Class for returning values from Dummy Transformation strategy.\"\"\" result : str = Field ( ... , description = \"The job ID.\" )","title":"transformation"},{"location":"api_reference/strategies/transformation/#transformation","text":"Demo transformation strategy class.","title":"transformation"},{"location":"api_reference/strategies/transformation/#oteapi_aiida.strategies.transformation.DummyTransformationStrategy","text":"Transformation Strategy. Registers strategies : (\"transformationType\", \"script/DEMO\") Source code in oteapi_aiida/strategies/transformation.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 @dataclass class DummyTransformationStrategy : \"\"\"Transformation Strategy. **Registers strategies**: - `(\"transformationType\", \"script/DEMO\")` \"\"\" transformation_config : TransformationConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def run ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDummyTransformation : \"\"\"Run a transformation job. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. As a minimum, the dictionary will contain the job ID. \"\"\" return SessionUpdateDummyTransformation ( result = \"a01d\" ) def status ( self , task_id : str ) -> TransformationStatus : \"\"\"Get job status. Parameters: task_id: The transformation job ID. Returns: An overview of the transformation job's status, including relevant metadata. \"\"\" return TransformationStatus ( id = task_id , status = \"wip\" , messages = [], created = datetime . utcnow (), startTime = datetime . utcnow (), finishTime = datetime . utcnow (), )","title":"DummyTransformationStrategy"},{"location":"api_reference/strategies/transformation/#oteapi_aiida.strategies.transformation.DummyTransformationStrategy.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/transformation.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"get()"},{"location":"api_reference/strategies/transformation/#oteapi_aiida.strategies.transformation.DummyTransformationStrategy.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_aiida/strategies/transformation.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"api_reference/strategies/transformation/#oteapi_aiida.strategies.transformation.DummyTransformationStrategy.run","text":"Run a transformation job. This method will be called through the /initialize endpoint of the OTEAPI Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDummyTransformation An update model of key/value-pairs to be stored in the SessionUpdateDummyTransformation session-specific context from services. SessionUpdateDummyTransformation As a minimum, the dictionary will contain the job ID. Source code in oteapi_aiida/strategies/transformation.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def run ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDummyTransformation : \"\"\"Run a transformation job. This method will be called through the `/initialize` endpoint of the OTEAPI Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. As a minimum, the dictionary will contain the job ID. \"\"\" return SessionUpdateDummyTransformation ( result = \"a01d\" )","title":"run()"},{"location":"api_reference/strategies/transformation/#oteapi_aiida.strategies.transformation.DummyTransformationStrategy.status","text":"Get job status. Parameters: Name Type Description Default task_id str The transformation job ID. required Returns: Type Description TransformationStatus An overview of the transformation job's status, including relevant TransformationStatus metadata. Source code in oteapi_aiida/strategies/transformation.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 def status ( self , task_id : str ) -> TransformationStatus : \"\"\"Get job status. Parameters: task_id: The transformation job ID. Returns: An overview of the transformation job's status, including relevant metadata. \"\"\" return TransformationStatus ( id = task_id , status = \"wip\" , messages = [], created = datetime . utcnow (), startTime = datetime . utcnow (), finishTime = datetime . utcnow (), )","title":"status()"},{"location":"api_reference/strategies/transformation/#oteapi_aiida.strategies.transformation.SessionUpdateDummyTransformation","text":"Bases: SessionUpdate Class for returning values from Dummy Transformation strategy. Source code in oteapi_aiida/strategies/transformation.py 14 15 16 17 class SessionUpdateDummyTransformation ( SessionUpdate ): \"\"\"Class for returning values from Dummy Transformation strategy.\"\"\" result : str = Field ( ... , description = \"The job ID.\" )","title":"SessionUpdateDummyTransformation"}]}